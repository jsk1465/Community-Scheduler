{"version":3,"sources":["../../src/eslint/getJSDocComment.js"],"names":["isCommentToken","token","type","looksLikeExport","astNode","getJSDocComment","sourceCode","node","settings","findJSDocComment","tokenBefore","getTokenBefore","includeComments","minLines","maxLines","value","charAt","loc","start","line","end","parent","includes","getCommentsBefore","length","test"],"mappings":"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","sourcesContent":["/**\n * Obtained originally from {@link https://github.com/eslint/eslint/blob/master/lib/util/source-code.js#L313}\n *\n * @license MIT\n */\n\n/**\n * Checks if the given token is a comment token or not.\n *\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is a comment token.\n */\nconst isCommentToken = (token) => {\n  return token.type === 'Line' || token.type === 'Block' || token.type === 'Shebang';\n};\n\n/**\n * Check to see if its a ES6 export declaration.\n *\n * @param {ASTNode} astNode An AST node.\n * @returns {boolean} whether the given node represents an export declaration.\n * @private\n */\nconst looksLikeExport = function (astNode) {\n  return astNode.type === 'ExportDefaultDeclaration' || astNode.type === 'ExportNamedDeclaration' ||\n    astNode.type === 'ExportAllDeclaration' || astNode.type === 'ExportSpecifier';\n};\n\n/**\n * Retrieves the JSDoc comment for a given node.\n *\n * @param {SourceCode} sourceCode The ESLint SourceCode\n * @param {ASTNode} node The AST node to get the comment for.\n * @param {object} settings The settings in context\n * @returns {Token|null} The Block comment token containing the JSDoc comment\n *    for the given node or null if not found.\n * @public\n * @deprecated\n */\nconst getJSDocComment = function (sourceCode, node, settings) {\n  /**\n   * Checks for the presence of a JSDoc comment for the given node and returns it.\n   *\n   * @param {ASTNode} astNode The AST node to get the comment for.\n   * @returns {Token|null} The Block comment token containing the JSDoc comment\n   *    for the given node or null if not found.\n   * @private\n   */\n  const findJSDocComment = (astNode) => {\n    const tokenBefore = sourceCode.getTokenBefore(astNode, {includeComments: true});\n    const {minLines, maxLines} = settings;\n    if (\n      tokenBefore &&\n      isCommentToken(tokenBefore) &&\n      tokenBefore.type === 'Block' &&\n      tokenBefore.value.charAt(0) === '*' &&\n      astNode.loc.start.line - tokenBefore.loc.end.line >= minLines &&\n      astNode.loc.start.line - tokenBefore.loc.end.line <= maxLines\n    ) {\n      return tokenBefore;\n    }\n\n    return null;\n  };\n  let {parent} = node;\n\n  switch (node.type) {\n  case 'TSInterfaceDeclaration':\n  case 'ClassDeclaration':\n  case 'FunctionDeclaration':\n    return findJSDocComment(looksLikeExport(parent) ? parent : node);\n\n  case 'ClassExpression':\n  case 'ObjectExpression':\n  case 'ArrowFunctionExpression':\n  case 'FunctionExpression':\n    if (\n      !['CallExpression', 'OptionalCallExpression', 'NewExpression'].includes(parent.type)\n    ) {\n      while (\n        !sourceCode.getCommentsBefore(parent).length &&\n        !/Function/u.test(parent.type) &&\n        parent.type !== 'MethodDefinition' &&\n        parent.type !== 'Property'\n      ) {\n        parent = parent.parent;\n\n        if (!parent) {\n          break;\n        }\n      }\n\n      if (parent && parent.type !== 'FunctionDeclaration' && parent.type !== 'Program') {\n        return findJSDocComment(parent);\n      }\n    }\n\n    return findJSDocComment(node);\n\n  default:\n    if (!node) {\n      return null;\n    }\n\n    return findJSDocComment(node);\n  }\n};\n\nexport default getJSDocComment;\n"],"file":"getJSDocComment.js"}